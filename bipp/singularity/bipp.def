Bootstrap: docker
From: spack/ubuntu-focal:v0.18.1
Stage: builder


%post
  # Build stage with Spack pre-installed and ready to be used
  # Cuda architecture, see https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
  cuda_arch=70

  # GCC cpu architecture flag, see https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html
  cpu_arch=cascadelake

  # spack cpu architecture flag, see https://spack.readthedocs.io/en/latest/basic_usage.html#support-for-specific-microarchitectures
  spack_arch=${cpu_arch}

  # What we want to install and how we want to install it
  #is specified in a manifest file (spack.yaml)
  mkdir /opt/spack-environment \
  &&  (echo "spack:" \
  &&   echo "  specs:" \
  &&   echo "  - py-numpy@1.21.6 ^python@3.9.1 ^openblas threads=openmp" \
  &&   echo "  - py-astropy" \
  &&   echo "  - py-matplotlib" \
  &&   echo "  - py-tqdm" \
  &&   echo "  - py-pyproj" \
  &&   echo "  - py-healpy ^libsharp ~mpi" \
  &&   echo "  - py-scikit-learn" \
  &&   echo "  - py-pandas" \
  &&   echo "  - cmake" \
  &&   echo "  - fftw ~mpi +openmp" \
  &&   echo "  - vc" \
  &&   echo "  concretizer:" \
  &&   echo "    unify: true" \
  &&   echo "    targets:" \
  &&   echo "      host_compatible: false" \
  &&   echo "  config:" \
  &&   echo "    install_tree: /opt/software" \
  &&   echo "  view: /opt/view" \
  &&   echo "  packages:" \
  &&   echo "    all:" \
  &&   echo "      target: [${spack_arch}]") > /opt/spack-environment/spack.yaml

  . /opt/spack/share/spack/setup-env.sh

  # Install the software, remove unnecessary deps
  cd /opt/spack-environment && \
  spack env activate . && \
  spack install --fail-fast && \
  spack gc -y

  # Strip all the binaries
  find -L /opt/view/* -type f -exec readlink -f '{}' \; | \
  xargs file -i | \
  grep 'charset=binary' | \
  grep 'x-executable\|x-archive\|x-sharedlib' | \
  awk -F: '{print $1}' | xargs strip -s

  # Modifications to the environment that are necessary to run
  cd /opt/spack-environment && \
  spack env activate --sh -d . >> /etc/profile.d/z10_spack_environment.sh

  ls -rtl /opt/view/



Bootstrap: docker
From: nvidia/cuda:11.2.1-devel-ubuntu20.04
Stage: final


%files from builder
  /opt/spack-environment /opt/spack-environment
  /opt/software /opt/software
  /opt/view /opt/view
  /etc/profile.d/z10_spack_environment.sh /etc/profile.d/z10_spack_environment.sh


%post

  cuda_arch=70
  cpu_arch=cascadelake

  apt-get update && apt-get install -y gcc g++ gfortran git

  export LIBRARY_PATH=${LIBRARY_PATH}:/opt/view/lib:/opt/view/lib64
  export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/view/lib:/opt/view/lib64

  mkdir -p /project

  cd /project
  export CPATH=$CPATH:/opt/view/include \
  && git clone https://github.com/flatironinstitute/finufft.git \
  && export CFLAGS="-O3 -funroll-loops -march=${cpu_arch} -fcx-limited-range -fPIC" \
  && cd finufft \
  && git checkout v2.1.0 \
  && (echo "diff --git a/makefile b/makefile" \
  && echo "index 37c289a..169869c 100644" \
  && echo "--- a/makefile" \
  && echo "+++ b/makefile" \
  && echo "@@ -26,9 +26,9 @@ PYTHON = python3" \
  && echo " # Notes: 1) -Ofast breaks isfinite() & isnan(), so use -O3 which now is as fast" \
  && echo " #        2) -fcx-limited-range for fortran-speed complex arith in C++" \
  && echo " #        3) we use simply-expanded (:=) makefile variables, otherwise confusing" \
  && echo "-CFLAGS := -O3 -funroll-loops -march=native -fcx-limited-range \$(CFLAGS)" \
  && echo "-FFLAGS := \$(CFLAGS) \$(FFLAGS)" \
  && echo "-CXXFLAGS := \$(CFLAGS) \$(CXXFLAGS)" \
  && echo "+CFLAGS ?= -O3 -funroll-loops -march=native -fcx-limited-range" \
  && echo "+FFLAGS ?= \$(CFLAGS)" \
  && echo "+CXXFLAGS ?= \$(CFLAGS)" \
  && echo " # put this in your make.inc if you have FFTW>=3.3.5 and want thread-safe use..." \
  && echo " #CXXFLAGS += -DFFTW_PLAN_SAFE" \
  && echo " # FFTW base name, and math linking...") > patch_flags.patch \
  && git apply --reject patch_flags.patch \
  && make lib -j4 \
  && echo "export PYTHONPATH=\$PYTHONPATH:/project/finufft/python" >> /etc/profile.d/z11_paths.sh \
  && echo "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/project/finufft/lib" >> /etc/profile.d/z11_paths.sh \
  && echo "export PATH=\$PATH:/opt/view/bin/" >> /etc/profile.d/z11_paths.sh
  
  cd /project
  export NVARCH="-gencode=arch=compute_${cuda_arch},code=sm_${cuda_arch}" \
  && export NVCC=/usr/local/cuda/bin/nvcc \
  && export CFLAGS="-O3 -funroll-loops -march=${cpu_arch} -fcx-limited-range -fPIC" \
  && git clone https://github.com/AdhocMan/cufinufft.git \
  && cd cufinufft \
  && git checkout t3_d3 \
  && make lib -j4 \
  && echo "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/project/cufinufft/lib" >> /etc/profile.d/z11_paths.sh
  
  cd /project
  git clone https://github.com/imagingofthings/ImoT_tools.git \
  && cd ImoT_tools \
  && git checkout dev \
  && echo "export PYTHONPATH=\$PYTHONPATH:/project/ImoT_tools" >> /etc/profile.d/z11_paths.sh

  cd /project
  git clone https://github.com/AdhocMan/pypeline.git \
  && cd pypeline \
  && git checkout cpp_new_imager \
  && cd src/bluebild \
  && mkdir -p build \
  && cd build \
  && CUDACXX=/usr/local/cuda/bin/nvcc /opt/view/bin/cmake .. -DBLUEBILD_GPU=CUDA -DCMAKE_CUDA_ARCHITECTURES=${cuda_arch} -DCMAKE_PREFIX_PATH="/opt/view;/project/finufft;/project/cufinufft" -DCMAKE_CXX_FLAGS="-march=${cpu_arch}" -DCMAKE_C_FLAGS="-march=${cpu_arch}" -DCMAKE_CUDA_FLAGS="--compiler-options=\"-march=${cpu_arch}\"" -DCMAKE_INSTALL_PREFIX=$(pwd)/install_dir -DBLUEBILD_INSTALL=PYTHON\
  && make install -j4 VERBOSE=1\
  && echo "export PYTHONPATH=\$PYTHONPATH:/project/pypeline:/project/pypeline/src/bluebild/build/install_dir" >> /etc/profile.d/z11_paths.sh

  # make default python commands available. Spack seems to set wrong symbolic links
  cd /opt/view/bin \
  && rm python python3 python-config python3-config \
  && ln -s /opt/view/bin/python3.9 python \
  && ln -s /opt/view/bin/python3.9 python3 \
  && ln -s /opt/view/bin/python3.9-config python-config \
  && ln -s /opt/view/bin/python3.9-config python3-config

%environment
  export LIBRARY_PATH=${LIBRARY_PATH}:/opt/view/lib:/opt/view/lib64
  export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/view/lib:/opt/view/lib64
  export PATH=${PATH}:/opt/view/bin

%runscript
  cd /project
  exec /bin/bash --rcfile /etc/profile -l -c "$@"
  

%startscript
  cd /project
  exec /bin/bash --rcfile /etc/profile -l -c "$@"
